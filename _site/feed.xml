<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-06-06T21:49:17+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Arnau Gàmez i Montolio</title><subtitle>Arnau Gàmez i Montolio's (@arnaugamez) personal blog. Hacking, Reverse Engineering and Mathematics</subtitle><author><name>Arnau Gàmez i Montolio</name></author><entry><title type="html">Write-up for FlareOn7 challenge #5 - TKApp</title><link href="http://localhost:4000/blog/2020/12/18/writeup-flareon7-challenge5/" rel="alternate" type="text/html" title="Write-up for FlareOn7 challenge #5 - TKApp" /><published>2020-12-18T00:00:00+01:00</published><updated>2020-12-18T00:00:00+01:00</updated><id>http://localhost:4000/blog/2020/12/18/writeup-flareon7-challenge5</id><content type="html" xml:base="http://localhost:4000/blog/2020/12/18/writeup-flareon7-challenge5/">&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;We are introduced to the challenge with the following message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now you can play Flare-On on your watch! As long as you still have an arm left to put a watch on, or emulate the watch’s operating system with sophisticated developer tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;h2 id=&quot;retrieve-flag&quot;&gt;Retrieve flag&lt;/h2&gt;</content><author><name>Arnau Gàmez i Montolio</name></author><category term="Blog" /><category term="flareon" /><category term="reversing" /><category term="CTF" /><category term="dotPeek" /><category term=".NET" /><summary type="html">Description We are introduced to the challenge with the following message:</summary></entry><entry><title type="html">Write-up for FlareOn7 challenge #4 - report</title><link href="http://localhost:4000/blog/2020/12/12/writeup-flareon7-challenge4/" rel="alternate" type="text/html" title="Write-up for FlareOn7 challenge #4 - report" /><published>2020-12-12T00:00:00+01:00</published><updated>2020-12-12T00:00:00+01:00</updated><id>http://localhost:4000/blog/2020/12/12/writeup-flareon7-challenge4</id><content type="html" xml:base="http://localhost:4000/blog/2020/12/12/writeup-flareon7-challenge4/">&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;We are introduced to the challenge with the following message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nobody likes analysing infected documents, but it pays the bills. Reverse this macro thrill-ride to discover how to get it to show you the key.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a single file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;report.xls&lt;/code&gt; to analyze, which is an excel document with the old windows format. From the challenge description and the kind of file we are given, we can be sure that we will have to deal with an excel macro.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;p&gt;If we open the document we find the following image within the spreadsheet.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch4/report_initial_image.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch4/report_initial_image.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Image asking to enable macros when opening report.xls&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;On a real scenario, the contents of this image would serve the purpose of tricking the victim into enabling and executing the embedded macro containing malicious code.&lt;/p&gt;

&lt;p&gt;I don’t usually have to deal with macros on my reversing adventures, so I wanted to get the &lt;em&gt;full experience&lt;/em&gt; from this challenge. Thus, I will actually allow it to run the embedded macro to see what happens.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;WARNING: Never run an office macro outside a controled and isolated environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, let’s enable macros and allow to run. It will inmediately throw an error.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 50%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch4/error_macro_launch.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch4/error_macro_launch.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Error produced when attempting to launch macro&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;From the title of this window, it appears that the embedded macro failing to run is coded in &lt;a href=&quot;https://en.wikipedia.org/wiki/Visual_Basic_for_Applications&quot;&gt;Visual Basic for Applications (VBA)&lt;/a&gt;. Clicking in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ok&lt;/code&gt; button will bring us into a fancy internal VBA IDE where we can explore all the components of the macro.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 50%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch4/report_VBAProject.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch4/report_VBAProject.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Project structure of report.xls VBA macro&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ThisWorkbook&lt;/code&gt; contains very little code that just jumps into the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;folderol&lt;/code&gt; within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sheet1&lt;/code&gt;, which contains some amount of non-trivial code.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch4/original_vba.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch4/original_vba.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Sheet1 code initially found&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Also, we find the intersting form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F&lt;/code&gt; with very suspicious data inside that appears to be used within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sheet1&lt;/code&gt;. We will export the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F&lt;/code&gt; form for later usage (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Right click&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Export File...&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 50%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch4/Forms_F.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch4/Forms_F.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Form F containing interesting data&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If we google for a couple minutes about VBA macros related to malware spread, we quickly find some &lt;em&gt;recent&lt;/em&gt; information about a technique known as VBA stomping. Essentially, this technique leverages a mismatch between the &lt;a href=&quot;https://en.wikipedia.org/wiki/Microsoft_P-Code&quot;&gt;p-code&lt;/a&gt; (the compiled &lt;a href=&quot;https://en.wikipedia.org/wiki/Intermediate_representation&quot;&gt;intermediate represenation&lt;/a&gt; bytecode of the VBA macro) and the code that is presented in clear text on the editor.&lt;/p&gt;

&lt;p&gt;If you are interested, you can read more about VBA stomping in the following references:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/outflanknl/EvilClippy&quot;&gt;https://github.com/outflanknl/EvilClippy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/walmartglobaltech/vba-stomping-advanced-maldoc-techniques-612c484ab278&quot;&gt;https://medium.com/walmartglobaltech/vba-stomping-advanced-maldoc-techniques-612c484ab278&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vbastomp.com/&quot;&gt;https://vbastomp.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This really appears to be what is going on with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;report.xls&lt;/code&gt;. Thus, we will continue by dumping the real p-code and obtaining its actual VBA representation so we can analyze/run it.&lt;/p&gt;

&lt;h2 id=&quot;reconstruct-document&quot;&gt;Reconstruct document&lt;/h2&gt;
&lt;p&gt;I decided to (re)construct a valid document to embed and launch the fixed VBA macro within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sheet1&lt;/code&gt;. First of all, we create a new document, go to developer tab (will need to &lt;a href=&quot;https://support.microsoft.com/en-us/office/show-the-developer-tab-e1192344-5e56-4d45-931b-e5fd9bea2d45&quot;&gt;enable developer tab on excel&lt;/a&gt;) and click the first icon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Visual Basic&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, we import the figure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F&lt;/code&gt; saved before (Right click on project -&amp;gt; Import File… -&amp;gt; F.frm)
and copy-paste the contents of previous &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ThisWorkBook&lt;/code&gt; into the newly created one.&lt;/p&gt;

&lt;h3 id=&quot;dump-and-decompile-p-code&quot;&gt;Dump and decompile p-code&lt;/h3&gt;
&lt;p&gt;We dump the embedded p-code with &lt;a href=&quot;https://github.com/bontchev/pcodedmp&quot;&gt;pcodedmp&lt;/a&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macro.pcode&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pcodedmp -o macro.pcode report.xls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Among other info, the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macro.pcode&lt;/code&gt; contains the p-code formatted output for the code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sheet1&lt;/code&gt;. Now we can &lt;em&gt;decompile&lt;/em&gt; the p-code back into VBA with &lt;a href=&quot;https://pypi.org/project/pcode2code/&quot;&gt;pcode2code&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pcode2code -p macro.pcode &amp;gt; decompiled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we take a look into the decompiled code we will see some small parts that have not been sucessfully decompiled. Despite that, we observe enough difference with the code presented to us initially, confirming our hypothesis of mismatching between the high level language representation and the embedded p-code. Essentially, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;folderol&lt;/code&gt; function now has a new buffer variable and some new code that plays with it.&lt;/p&gt;

&lt;p&gt;There are also some minor errors in data types that we will need to fix if we want it to run. Moreover, we find a bunch of checks and protections that will have to be bypassed in order for the code to properly execute. Thus, let’s copy the decompiled code into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sheet1&lt;/code&gt; in the newly created document and fix stuff as we go.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch4/raw_decompiled.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch4/raw_decompiled.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Sheet1 code raw decompiled from embedded p-code&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;fix-and-clean-decompiled-code&quot;&gt;Fix and clean decompiled code&lt;/h3&gt;

&lt;p&gt;From &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rigmarole&lt;/code&gt; function:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_FFFE&lt;/code&gt; parameter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;folderol&lt;/code&gt; function:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_FFFE&lt;/code&gt; parameter.&lt;/li&gt;
  &lt;li&gt;In the usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wabbit&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onzo&lt;/code&gt; we see that they need to be array based types, so we just add a pair of missing parentheses to their type in its declaration.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xertz&lt;/code&gt; is no longer used, so we can remove its declaration and assignment.&lt;/li&gt;
  &lt;li&gt;The following body that failed to decompile:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ld fn 
Sharp 
LitDefault 
Ld wabbit 
PutRec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;essentially translates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Put #fn, , wabbit&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;canoodle&lt;/code&gt; function:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_FFFE&lt;/code&gt; parameter.&lt;/li&gt;
  &lt;li&gt;Return type has to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byte()&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Append&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kerfuffle&lt;/code&gt; variable needs to be an array as well, so we add parentheses to its type.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Without knowing &lt;del&gt;nothing&lt;/del&gt; too much about VBA or p-code, we can guess most fixes from the contents of the VBA code displayed in the original file, and just check that the corresponding p-code makes sense.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bypass-checks-and-protections&quot;&gt;Bypass checks and protections&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Remove everything before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rigmarole&lt;/code&gt; function. We do not worry of internet checks and names, as we will bypass it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Entirely remove the condition using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetInternetConnectedState&lt;/code&gt; to check for internet connection.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then, we have a routine that appears to be doing some simple anti-vm checks. As nothing coming out from this part will be used, we can literally remove it entirely as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firkin&lt;/code&gt; variable being loaded (with device name) and compared to the string returned by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rigmarole(onzo(3))&lt;/code&gt;. We could be tempted to bypass the conditional, but we see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firkin&lt;/code&gt; is actually used afterwards, so we better get this value right by simply assigning to it the correct value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firkin = rigmarole(onzo(3))&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch4/bypass_protections.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch4/bypass_protections.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Bypass of checks and protections on decompiled folderol function&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are curious, you could play with the integrated debugger to see what values are actually used and expected for the anti-vm checks and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firkin&lt;/code&gt; variable. Indeed, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firkin&lt;/code&gt; will be loaded with the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLARE-ON&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;retrieve-flag&quot;&gt;Retrieve flag&lt;/h2&gt;

&lt;p&gt;After we have cleaned and fixed everything, as well as bypassing all the checks, we obtain the resulting code for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sheet1&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Function rigmarole(es As String) As String
  Dim furphy As String
  Dim c As Integer
  Dim s As String
  Dim cc As Integer
  furphy = &quot;&quot;
  For i = 1 To Len(es) Step 4
    c = CDec(&quot;&amp;amp;H&quot; &amp;amp; Mid(es, i, 2))
    s = CDec(&quot;&amp;amp;H&quot; &amp;amp; Mid(es, i + 2, 2))
    cc = c - s
    furphy = furphy + Chr(cc)
  Next i
  rigmarole = furphy
End Function
      
Function folderol()
  Dim wabbit() As Byte
  Dim fn As Integer: fn = FreeFile
  Dim onzo() As String
  Dim mf As String
  Dim buff(0 To 7) As Byte
  
  onzo = Split(F.L, &quot;.&quot;)
  
  firkin = rigmarole(onzo(3))
  
  n = Len(firkin)
  For i = 1 To n
    buff(n - i) = Asc(Mid$(firkin, i, 1))
  Next
  
  wabbit = canoodle(F.T.Text, 2, 285729, buff)
  mf = Environ(rigmarole(onzo(0))) &amp;amp; rigmarole(onzo(11))
  Open mf For Binary Lock Read Write As #fn
    Put #fn, , wabbit
  Close #fn
  
  Set panuding = Sheet1.Shapes.AddPicture(mf, False, True, 12, 22, 600, 310)
End Function
      
Function canoodle(panjandrum As String, ardylo As Integer, s As Long, bibble As Variant) As Byte()
  Dim quean As Long
  Dim cattywampus As Long
  Dim kerfuffle() As Byte
  ReDim kerfuffle(s)
  quean = 0
  For cattywampus = 1 To Len(panjandrum) Step 4
    kerfuffle(quean) = CByte(&quot;&amp;amp;H&quot; &amp;amp; Mid(panjandrum, cattywampus + ardylo, 2)) Xor bibble(quean Mod (UBound(bibble) + 1))
    quean = quean + 1
    If quean = UBound(kerfuffle) Then
      Exit For
    End If
  Next cattywampus
  canoodle = kerfuffle
End Function
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Taking a quick look at the code, it is clear that the data present in the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F&lt;/code&gt; is being decrypted into a buffer that eventually gets written as an image into the spreadsheet itself.&lt;/p&gt;

&lt;p&gt;One approach could have been to reimplement this decrypting algorithm externally, but as we already fixed the actual decompiled code and bypassed all checks, we will be able to simply run it and let it do all the work for us. Therefore, if we now just run the macro, we will get in the spreadsheet the resulting image with the flag:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch4/flag.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch4/flag.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Decrypted image containing the flag&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Thus, we obtained the flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thi5_cou1d_h4v3_b33n_b4d@flare-on.com&lt;/code&gt; and completed the challenge.&lt;/p&gt;</content><author><name>Arnau Gàmez i Montolio</name></author><category term="Blog" /><category term="flareon" /><category term="reversing" /><category term="CTF" /><category term="macros" /><category term="excel" /><summary type="html">Description We are introduced to the challenge with the following message:</summary></entry><entry><title type="html">Write-up for FlareOn7 challenge #3 - wednesday</title><link href="http://localhost:4000/blog/2020/11/07/writeup-flareon7-challenge3/" rel="alternate" type="text/html" title="Write-up for FlareOn7 challenge #3 - wednesday" /><published>2020-11-07T00:00:00+01:00</published><updated>2020-11-07T00:00:00+01:00</updated><id>http://localhost:4000/blog/2020/11/07/writeup-flareon7-challenge3</id><content type="html" xml:base="http://localhost:4000/blog/2020/11/07/writeup-flareon7-challenge3/">&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;We are introduced to the challenge with the following message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Be the wednesday. Unlike challenge 1, you probably won’t be able to beat this game the old fashioned way. Read the README.txt file, it is very important.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.txt&lt;/code&gt; file, we find the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                   --- BE THE WEDNESDAY ---

                               S
                               M
                               T
                              DUDE
                               T
                               F
                               S

            --- Enable accelerated graphics in VM ---
              --- Attach sound card device to VM ---
                --- Only reverse mydude.exe ---
                   --- Enjoy it my dudes ---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;We set up our VM accordingly and start analyzing the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mydude.exe&lt;/code&gt; as indicated.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;h3 id=&quot;basic-exploration&quot;&gt;Basic exploration&lt;/h3&gt;
&lt;p&gt;If we load our binary into &lt;a href=&quot;http://ntinfo.biz/index.html&quot;&gt;Detect It Easy&lt;/a&gt;, we find that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mydude.exe&lt;/code&gt; is a 32-bit PE Windows executable.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/die.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/die.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Output of Detect It Easy (DIE)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We launch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mydude.exe&lt;/code&gt; and are prompted with what appears to be the welcome screen of a weird game called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wednesday&lt;/code&gt; starring an amorphous frog.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/welcome_screen_game.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/welcome_screen_game.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Wednesday's welcome screen&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Clicking into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DUDE&lt;/code&gt; button will get us into the actual game screen. It appears to be a simple game where we have to avoid the obstacles in order to advance, either by jumping over them or ducking down. If we hit one of the obstacles, the game is automatically reset.&lt;/p&gt;

&lt;p&gt;Moreover, it looks like we do not only need to avoid the obstacles, but also we must do so in a certain fashion for each obstacle (according to its appearing order), either by jumping or ducking.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/game.gif&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/game.gif&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Wednesday's game screen&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After a couple minutes playing, we start to discover the pattern that describes the way in which each appearing obstacle has to be dodged. In particular, for the first obstacles, we have:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_ _ * * _ _ _ * _ * * * _ * _ _ ... jump (*) | duck (_)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;locate-interesting-parts-of-code&quot;&gt;Locate interesting parts of code&lt;/h3&gt;

&lt;p&gt;Let’s load &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mydude.exe&lt;/code&gt; in IDA, and make sure to allow it to load the embedded symbols detected. A ton of functions will be found, most of them having seemingly weird/random suffixes. Such rare function names appear to be related to the fact that the game has been coded in &lt;a href=&quot;https://nim-lang.org/&quot;&gt;Nim&lt;/a&gt; (you can find a bunch of symbols containing “Nim” in it).&lt;/p&gt;

&lt;p&gt;Although we have symbols, we still have a huge amount of functions and code to explore. Thus, in order to locate interesting sections of the code logic, we will use a common trick from the old days of game hacking: finding interesting values in memory for &lt;em&gt;things&lt;/em&gt; whose values change in a predictable and known manner. By locating them, we will be able to track back to meaningul code that references them. In this case, we will use &lt;a href=&quot;https://www.cheatengine.org&quot;&gt;Cheat Engine&lt;/a&gt; to do so.&lt;/p&gt;

&lt;p&gt;One obvious candidate is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Score&lt;/code&gt; value that gets incremented any time we pass an obstacle. We just need to start the game (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Score = 0&lt;/code&gt;) and inmediately look for memory locations storing the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New Scan&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value: 0&lt;/code&gt;. After we pass a couple obstacles, we can quickly change the value field to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value: 2&lt;/code&gt; and clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Next Scan&lt;/code&gt;. This way, we will find memory locations that held a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; during first scan, and a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; during second scan.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/cheat_engine_1.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/cheat_engine_1.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Cheat Engine showing the two memory references to Score value&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We find two interesting memory locations, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00443D64&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0044DDB0&lt;/code&gt;, lying within our executable memory region and referencing values having the exact behavior of the score being updated as we pass through obstacles. These memory addresses have been named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCORE_REF_1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCORE_REF_2&lt;/code&gt; in Cheat Engine for clarity purposes.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the memory address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00443D64&lt;/code&gt; in IDA. We find that it is a named symbol starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_prev_score&lt;/code&gt;. Also, it gets cross referenced by functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@resetEverything__Q1G0...&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@update__Arw3...&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/prev_score_ref.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/prev_score_ref.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;IDA's view of first reference to Score value found&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If we take a quick look into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@resetEverything__Q1G0...&lt;/code&gt; function, we instantly find in its first basic block a reference to an interesting memory location named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_obstacles__Xqz...&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/resetEverything_fun_obstacles_highlight.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/resetEverything_fun_obstacles_highlight.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;First basic block of @resetEverything__Q1G0... function&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;At its turn, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obstacles__Xqz...&lt;/code&gt; points to another memory location named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_TM__V45tF8...&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/obstacles_array.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/obstacles_array.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Memory view of _TM__V45tF8... value pointed by obstacles__Xqz...&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;But wait… we observe a «table» of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;’s and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;’s describing a familiar pattern:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_ _ * * _ _ _ * _ * * * _ * _ _
0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Exactly! We find the same pattern we encountered while playing the game at the very beginning. If we take a closer look, there are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;296&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00000128&lt;/code&gt;) values, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, conforming this array of bytes.&lt;/p&gt;

&lt;p&gt;Let’s take a look at cross references to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_obstacles_Xqz...&lt;/code&gt;. We find three functions reading it. From these, one appears to be an initialization function and another one is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@resetEverything__Q1G0...&lt;/code&gt; function where we found it being referenced before.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/xrefs_to_obstacles.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/xrefs_to_obstacles.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Cross references to _obstacles_Xqz...&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Notice that the third function is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@update__Arw3...&lt;/code&gt;, the same function that appeared also as a cross reference to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_prev_score&lt;/code&gt; memory location, so it is a good idea to dig deeper into this function.&lt;/p&gt;

&lt;p&gt;But, before exploring this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@update__Arw3...&lt;/code&gt; function, let’s take a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0044DDB0&lt;/code&gt;, which is the other interesting memory location we found on Cheat Engine. We find that it is a named symbol starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_score&lt;/code&gt; and cross referenced by the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@onCollide__9byA...&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/score_ref.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/score_ref.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;IDA's view of second reference to Score value found&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If we pull the thread on cross references, we find that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@onCollide__9byA...&lt;/code&gt; is referenced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@onCollide__BN6X...&lt;/code&gt;, which is referenced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@checkCollisions__P9bT...&lt;/code&gt;, which is referenced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@updateScene__rbzI...&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/xrefs_to_1st_oncollide.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/xrefs_to_1st_oncollide.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Cross references to @onCollide__9byA...&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/xrefs_to_2nd_oncollide.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/xrefs_to_2nd_oncollide.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Cross references to @onCollide__BN6X...&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/xrefs_to_checkCollisions.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/xrefs_to_checkCollisions.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Cross references to @checkCollisions__P9bT...&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now let’s finally explore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@update__Arw3...&lt;/code&gt; function. We find that it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@updateScene__rbzI...&lt;/code&gt;, followed by a conditional jump that will lead into a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@resetEverything__Q1G0...&lt;/code&gt; in case that the byte value pointed by the memory location stored at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax+F9&lt;/code&gt; is equal to 1.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/update_fun.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/update_fun.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;First basic blocks of @update__Arw3... function&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So, with the information we have obtained so far, we can make an educated guess about the inner working of the game with respect to collision management:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The game gets constantly updated (for example, frame based updates)&lt;/li&gt;
  &lt;li&gt;Every time the game updates, it will check for «general collisions» with an obstacle.&lt;/li&gt;
  &lt;li&gt;Every time the game goes through an obstacle, it will check for «table collisions», i.e. whether the way in which the obstacle is dodged coincides with the correspoinding move, as described on the obstacle’s table.&lt;/li&gt;
  &lt;li&gt;If either of the two collisions occur, the memory location pointed previously by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax+F9&lt;/code&gt; will be set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;. Thus, at next update, it will enter into the reset function to restart the game.&lt;/li&gt;
  &lt;li&gt;After &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;296&lt;/code&gt; obstacles successfully passed, «something» would happen; presumably, the flag should be revealed in some way.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bypass-collisions&quot;&gt;Bypass collisions&lt;/h2&gt;
&lt;p&gt;Our objective will be to patch the binary so that we can bypass all kinds of collisions while preserving the game behavior as if we completed it in a &lt;em&gt;legit&lt;/em&gt; way.&lt;/p&gt;

&lt;p&gt;The hasty idea would be to just patch the conditional jump after the comparison &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmp byte ptr [eax+0F9h], 1&lt;/code&gt; so it never gets into the basic block calling the reset function. However, this does not look like a good idea, as the code logic for recreating and showing the flag could (and indeed, will) be dependant of the actual code flow around the checks that set the memory location pointed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax+F9&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; at that point.&lt;/p&gt;

&lt;p&gt;Thus, our approach will be to find where this memory location gets written to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, so we can explore the code around and patch effectively without altering the global code flow. To do so, we will use the &lt;a href=&quot;https://x64dbg.com/&quot;&gt;x64dbg&lt;/a&gt; debugger (well, actually the 32-bit version, x32dbg).&lt;/p&gt;

&lt;p&gt;We load &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mydude.exe&lt;/code&gt; on x32dbg and let it run until it shows the welcome screen. Now we place a regular breakpoint at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x433D55&lt;/code&gt; (the location of the previously described comparison) and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DUDE&lt;/code&gt; to start the game.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/x64dbg_bp1.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/x64dbg_bp1.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Breakpoint set at 0x433D55 in x32dbg&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The breakpoint will be hit inmediately and pause the execution. Now, let’s get the memory address pointed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax+F9&lt;/code&gt; into the memory dump view by doing: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Right click -&amp;gt; Follow in Dump -&amp;gt; Address: EAX+F9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, we will add a hardware breakpoint on write access (at byte level, as the comparison is done at byte level as well) to this memory location. This can be seen in the following screenshot.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/x64dbg_bp2.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/x64dbg_bp2.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Set hardware breakpoint on write access to the byte pointed by eax+F9&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We can now remove (or disable) the previous breakpoint on the comparison. Let’s continue running the program (pressing F9) and observe that the hardware breakpoint is getting hit repeatedly at two different places.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;At &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x43266C&lt;/code&gt; the memory location gets written to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;At &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x432247&lt;/code&gt; the memory location gets written to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It looks like these writes are used at each game update to control if a «general» collision happened.&lt;/p&gt;

&lt;p&gt;We are only interested in the location where it gets set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; (indicating a collision). Thus, in order not to hit the breakpoint for the location that sets the value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, we will modify the hardware breakpoint to be conditional. In particular, we set it not to be triggered whenever the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EIP&lt;/code&gt; would land into the address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x432673&lt;/code&gt;, which is the instruction following the write instruction at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x43266C&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/edit_hardware_bp.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/edit_hardware_bp.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Edit hardware breakpoint to add condition&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;patch-general-collision-check&quot;&gt;Patch general collision check&lt;/h3&gt;

&lt;p&gt;If we take a look at the code flow around this write at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x432247&lt;/code&gt;, we observe that we arrive to the basic block containing it depending on a previous conditional jump &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/general_collision_check.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/general_collision_check.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Code flow around general collision write at 0x432247&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;One quick and naive approach would be to patch this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; (indicating collision) into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;. However, this would not guarantee that the correct code path is followed. Thus, it is safer to patch the conditional jump to always take the correct path, where the memory location of our interest would not be written to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can easily patch this conditional jump into an inconditional jump by modifying the assembly instruction in the debugger, from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/patch_general_collisions.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/patch_general_collisions.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Patch conditional jump to bypass general collision check&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;patch-table-collision-check&quot;&gt;Patch table collision check&lt;/h3&gt;
&lt;p&gt;Now, we allow the game to run, noticing that it does not break instantly as before (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; write is not triggered because of the condition in the hardware breakpoint; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; write is bypassed  with the previous patch to the conditional jump).&lt;/p&gt;

&lt;p&gt;Indeed, we observe that if we start the game, it will go over the first two obstacles without hitting them and will only trigger the hardware breakpoint when hitting the third obstacle. This makes sense, as this third obstacle is the first one in which we would have to jump over, i.e. we have the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; at third position in the pattern/table we found before.&lt;/p&gt;

&lt;p&gt;This time, the breakpoint will lead us to a write of value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; to the memory location we are tracking, ocurring at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x43235E&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we take a look at the code flow around this write at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x43235E&lt;/code&gt;, we observe  a similar situation as before: we arrive to the basic block containing the write depending on a previous conditional jump &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jz&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/table_collision_check.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/table_collision_check.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Code flow around table collision write at 0x43235E&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As we did before, instead of patching this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, we will patch the conditional jump by changing this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jz&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp&lt;/code&gt; in the debugger, so it always follows the correct path.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/patch_table_collisions.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/patch_table_collisions.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Patch conditional jump to bypass table collision check&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;retrieve-flag&quot;&gt;Retrieve flag&lt;/h2&gt;

&lt;p&gt;We have patched both conditionals that led to basic blocks containing writes of value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; (indicating collision) into the memory location that was checked for restarting the game in case of a collision. Essentially, we have bypassed both «general» and «table» collisions, while preserving as much as possible the control flow followed by the original code.&lt;/p&gt;

&lt;p&gt;Thus, now it is just a matter of letting it run for a while. After 296 obstacles passed, it will show us a victory screen with the string “Winner!” as well as our flag: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1t_i5_wEdn3sd4y_mY_Dud3s@flare-on.com&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch3/flag.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch3/flag.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Wednesday's victory screen showing the flag&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;a-quicker-alternative&quot;&gt;A quicker alternative&lt;/h2&gt;

&lt;p&gt;Actually, if we had taken the table of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;296&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;’s and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;’s and treated them as binary digits, we could have decoded them and obtained the flag directly without the need to allow the game to be run.&lt;/p&gt;

&lt;p&gt;As an example, a simple python decoding routine is shown below.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;00110001011101000101111101101001001101010101111101110111010001010110010001101110001100110111001101100100001101000111100101011111011011010101100101011111010001000111010101100100001100110111001101000000011001100110110001100001011100100110010100101101011011110110111000101110011000110110111101101101&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'big'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ascii'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python dec.py
1t_i5_wEdn3sd4y_mY_Dud3s@flare-on.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This approach might have saved some time, but also would have spoiled the fun we had during our journey with this fancy frog ;)&lt;/p&gt;

&lt;p&gt;Anyway, we obtained the flag and completed the third challenge!&lt;/p&gt;</content><author><name>Arnau Gàmez i Montolio</name></author><category term="Blog" /><category term="flareon" /><category term="reversing" /><category term="CTF" /><category term="IDA" /><category term="x64dbg" /><category term="game" /><summary type="html">Description We are introduced to the challenge with the following message:</summary></entry><entry><title type="html">Write-up for FlareOn7 challenge #2 - garbage</title><link href="http://localhost:4000/blog/2020/10/24/writeup-flareon7-challenge2/" rel="alternate" type="text/html" title="Write-up for FlareOn7 challenge #2 - garbage" /><published>2020-10-24T00:00:00+02:00</published><updated>2020-10-24T00:00:00+02:00</updated><id>http://localhost:4000/blog/2020/10/24/writeup-flareon7-challenge2</id><content type="html" xml:base="http://localhost:4000/blog/2020/10/24/writeup-flareon7-challenge2/">&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;We are introduced to the challenge with the following message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One of our team members developed a Flare-On challenge but accidentally deleted it. We recovered it using extreme digital forensic techniques but it seems to be corrupted. We would fix it but we are too busy solving today’s most important information security threats affecting our global economy. You should be able to get it working again, reverse engineer it, and acquire the flag.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This challenge consists of the single file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;garbage.exe&lt;/code&gt;, so we will jump directly into analyzing it.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;p&gt;If we load our binary into &lt;a href=&quot;http://ntinfo.biz/index.html&quot;&gt;Detect It Easy&lt;/a&gt;, we find that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;garbage.exe&lt;/code&gt; is a 32-bit PE Windows executable, which appears to be packed with the popular &lt;a href=&quot;https://upx.github.io/&quot;&gt;UPX&lt;/a&gt; packer.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch2/die.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch2/die.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Output of Detect It Easy (DIE)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Inmediately, we try to unpack the file so we can proceed with our analysis. However, when we try to unpack the file with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upx&lt;/code&gt; utility, an error message is thrown.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch2/upx_bad.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch2/upx_bad.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Output of upx failed unpacking&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Remember the description message of the challenge? This might be (part of) the file’s corruption it refered to. It is clear that we need to fix the binary somehow before we can unpack it successfully.&lt;/p&gt;

&lt;h2 id=&quot;fix-binary-and-unpack&quot;&gt;Fix binary and unpack&lt;/h2&gt;

&lt;p&gt;Let’s load &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;garbage.exe&lt;/code&gt; into &lt;a href=&quot;https://hshrzd.wordpress.com/pe-bear/&quot;&gt;PE-Bear&lt;/a&gt; to investigate what could be wrong with it. We quickly find a a red-colored area under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rsrc&lt;/code&gt; section within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Section Hdrs&lt;/code&gt; tab.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch2/pe_bear_rsrc.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch2/pe_bear_rsrc.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Output of PE-Bear showing the mismatching .rsrc section size&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As it indicates, there is a mismatch between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rsrc&lt;/code&gt; section size reported in the PE header (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x400&lt;/code&gt;) and its actual size within the file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x124&lt;/code&gt;). To fix it, we will extend the file a total of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0x400 - 0x124)&lt;/code&gt; bytes. This can be easily done with &lt;a href=&quot;https://github.com/radareorg/radare2&quot;&gt;radare2&lt;/a&gt;. First of all, we make a copy of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;garbage.exe&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixed_garbage.exe&lt;/code&gt; so we can keep the original one, just in case.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cp garbage.exe fixed_garbage.exe
$ radare2 -w fixed_garbage.exe
[0x00418760]&amp;gt; r
40740
[0x00418760]&amp;gt; r 40740 + (0x400 - 0x124)
[0x00418760]&amp;gt; r
41472
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixed_garbage.exe&lt;/code&gt; with radare2 in write mode (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-w&lt;/code&gt;) so we can change its contents, which will be automatically stored on disk. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt; command shows us current file size (in bytes). If we specify a new size after it, we will effectively change file size to the indicated new size. We show the new size just to check it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fun fact: we could have used the following one-liner to achieve the same result without the need to get the initial file size, as we can use output of radare2 commands as values, similarly as we do in a regular shell:&lt;/p&gt;
  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[0x00418760]&amp;gt; r `r` + (0x400 - 0x124)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we try again to unpack &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fixed_garbage.exe&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upx&lt;/code&gt;, we will get a successful outcome resulting in the unpacked executable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unpacked_garbage.exe&lt;/code&gt; being created.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch2/upx_good.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch2/upx_good.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Output of upx successful unpacking&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;However, as we simply extended its size, the unpacked version will certainly still be corrupted. Indeed, if we attempt to launch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unpacked_garbage.exe&lt;/code&gt;, we (still) get the following error message:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/flareon7_ch2/error_open_unpacked.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/flareon7_ch2/error_open_unpacked.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Error executing unpacked_garbage.exe&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The &lt;em&gt;orthodox&lt;/em&gt; way of proceeding would be analyzing the PE file and completely fixing it to the point we could execute/debug the binary. However, as we are a bit lazy to do so, and we know some radare2’s emulation magic, we might try our luck to see if that would be enough.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are interested in radare2’s emulation with ESIL, I have a couple public &lt;a href=&quot;/talks&quot;&gt;talks&lt;/a&gt; covering it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;retrieve-flag-with-emulation&quot;&gt;Retrieve flag with emulation&lt;/h2&gt;

&lt;p&gt;Let’s open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unpacked_garbage.exe&lt;/code&gt; with radare2, analyze it and print the dissassembly of its main function.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ radare2 unpacked_garbage.exe
[0x00401473]&amp;gt; aaa
[x] Analyze all flags starting with sym. and entry0 (aa)
[x] Analyze function calls (aac)
[x] Analyze len bytes of instructions for references (aar)
[x] Check for vtables
[x] Type matching analysis for all functions (aaft)
[x] Propagate noreturn information
[x] Use -AA or aaaa to perform additional experimental analysis.
[0x00401473]&amp;gt; s main
[0x0040106b]&amp;gt; pdf
            ; CALL XREF from entry0 @ 0x4013e6
┌ 432: int main (int argc, char **argv, char **envp);
│           ; var LPDWORD lpNumberOfBytesWritten @ ebp-0x13c
│           ; var LPCSTR lpFileName @ ebp-0x138
--snip--
│           0x00401084      mov esi, str.nPTnaGLkIqdcQwvieFQKGcTGOTbfMjDNmvibfBDdFBhoPaBbtfQuuGWYomtqTFqvBSKdUMmciqKSGZaosWCSoZlcIlyQpOwkcAgw ; 0x4119f8 ; &quot;nPTnaGLkIqdcQwvieFQKGcTGOTbfMjDNmvibfBDdFBhoPaBbtfQuuGWYomtqTFqvBSKdUMmciqKSGZaosWCSoZlcIlyQpOwkcAgw &quot;
--snip--
│           0x004010b3      mov esi, str.KglPFOsQDxBPXmclOpmsdLDEPMRWbMDzwhDGOyqAkVMRvnBeIkpZIhFznwVylfjrkqprBPAdPuaiVoVugQAlyOQQtxBNsTdPZgDH ; 0x411a60 ; &quot;KglPFOsQDxBPXmclOpmsdLDEPMRWbMDzwhDGOyqAkVMRvnBeIkpZIhFznwVylfjrkqprBPAdPuaiVoVugQAlyOQQtxBNsTdPZgDH &quot;
--snip--
│           0x00401150      push ebx                    ; HANDLE hTemplateFile
│           0x00401151      push 0x80                   ; 128 ; DWORD dwFlagsAndAttributes
│           0x00401156      push 2                      ; 2 ; DWORD dwCreationDisposition
│           0x00401158      push ebx                    ; LPSECURITY_ATTRIBUTES lpSecurityAttributes
│           0x00401159      push 2                      ; 2 ; DWORD dwShareMode
│           0x0040115b      push 0x40000000             ; DWORD dwDesiredAccess
│           0x00401160      push dword [lpFileName]     ; LPCSTR lpFileName
│           0x00401166      call dword [sym.imp._CreateFileA] ; 0x40d00c ; HANDLE CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
│           0x0040116c      lea ecx, [lpFileName]
--snip--
│       │   0x0040119d      push ebx                    ; LPOVERLAPPED lpOverlapped
│       │   0x0040119e      lea eax, [lpNumberOfBytesWritten]
│       │   0x004011a4      push eax                    ; LPDWORD lpNumberOfBytesWritten
│       │   0x004011a5      push 0x3d                   ; '=' ; 61 ; DWORD nNumberOfBytesToWrite
│       │   0x004011a7      push dword [lpFileName]     ; LPCVOID lpBuffer
│       │   0x004011ad      push esi                    ; HANDLE hFile
│       │   0x004011ae      call dword [sym.imp._WriteFile] ; 0x40d004 ; BOOL WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
--snip--
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how there are a couple of suspicous strings being loaded. After that, we reach a call into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateFile&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00401166&lt;/code&gt; followed by another call into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WriteFile&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x004011ae&lt;/code&gt;. Thus, we will emulate the code of the main function to retrieve the parameters being passed into those two function calls.&lt;/p&gt;

&lt;p&gt;First, we initialize the ESIL emulation engine along its virtual memory with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aeim&lt;/code&gt;. Then we step until the offset where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateFile&lt;/code&gt; gets called with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aesu 0x00401166&lt;/code&gt;. Now we show the contents of the local variables at this precise moment with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;afvd&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[0x0040106b]&amp;gt; aeim
[0x0040106b]&amp;gt; aesu 0x00401166
[0x00401150]&amp;gt; afvd
--snip--
var lpFileName = 0x00177ec4 = 0x00177ec4 -&amp;gt; 0x00177fe4 &quot;sink_the_tanker.vbs&quot;
--snip--
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We observe a reference to the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sink_the_tanker.vbs&lt;/code&gt;, which looks like would be the name of the file being created if we actually fixed and executed the unpacked binary.&lt;/p&gt;

&lt;p&gt;As we are not interested in getting into the mess of actually emulating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateFile&lt;/code&gt; function, we can just skip it changing the instruction pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eip&lt;/code&gt; to the offset that comes after the function call. Then, we proceed to emulate until the call into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WriteFile&lt;/code&gt; and show the contents of the local variables again.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[0x00401150]&amp;gt; aer eip=0x0040116c
[0x00401150]&amp;gt; aesu 0x004011ae
[0x0040119d]&amp;gt; afvd
--snip--
var lpFileName = 0x00177ec4 = 0x00177ec4 -&amp;gt; 0x00177fa4 &quot;MsgBox(&quot;Congrats! Your key is: C0rruptGarbag3@flare-on.com&quot;)&quot;
--snip--
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We get a reference to a string containing an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MsgBox&lt;/code&gt; function, presumably to be written into the previous &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sink_the_tanker.vbs&lt;/code&gt; file. Even better, the message inside this MsgBox contains our flag. Awesome!&lt;/p&gt;

&lt;p&gt;Thus, we obtained the flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C0rruptGarbag3@flare-on.com&lt;/code&gt; and successfully finished this challenge!&lt;/p&gt;</content><author><name>Arnau Gàmez i Montolio</name></author><category term="Blog" /><category term="flareon" /><category term="reversing" /><category term="radare2" /><category term="emulation" /><category term="esil" /><category term="CTF" /><summary type="html">Description We are introduced to the challenge with the following message:</summary></entry><entry><title type="html">Write-up for FlareOn7 challenge #1 - fidler</title><link href="http://localhost:4000/blog/2020/10/23/writeup-flareon7-challenge1/" rel="alternate" type="text/html" title="Write-up for FlareOn7 challenge #1 - fidler" /><published>2020-10-23T00:00:00+02:00</published><updated>2020-10-23T00:00:00+02:00</updated><id>http://localhost:4000/blog/2020/10/23/writeup-flareon7-challenge1</id><content type="html" xml:base="http://localhost:4000/blog/2020/10/23/writeup-flareon7-challenge1/">&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;We are introduced to the challenge with the following message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Welcome to the Seventh Flare-On Challenge!&lt;/p&gt;

  &lt;p&gt;This is a simple game. Win it by any means necessary and the victory screen will reveal the flag. Enter the flag here on this site to score and move on to the next level.&lt;/p&gt;

  &lt;p&gt;This challenge is written in Python and is distributed as a runnable EXE and matching source code for your convenience. You can run the source code directly on any Python platform with PyGame if you would prefer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did not even bother to install PyGame and went straight into the only interesting file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fidler.py&lt;/code&gt;, which contains all the logic of the program.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;It is a small and very easy to follow python program. Within a quick glimpse, we inmediately bump into the following two functions: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decode_flag&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;victory_screen&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frob&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoded_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1135&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1038&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1126&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1028&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1117&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1071&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1094&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1077&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1121&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1087&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1110&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1092&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1072&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1095&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1090&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1027&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;mi&quot;&gt;1127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1040&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1030&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1099&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1062&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1027&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1136&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1054&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;decoded_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_value&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;decoded_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;last_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;victory_screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;heading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'If the following key ends with @flare-on.com you probably won!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gold'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fonts/arial.ttf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flag_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Flag:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gold'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fonts/arial.ttf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flag_content_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'the_flag_goes_here'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fonts/arial.ttf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag_content_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;flag_content_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;change_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# --snip--
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decode_flag&lt;/code&gt; runs a fairly easy decryption routine to retrive the flag, depending on the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frob&lt;/code&gt; received. This function will be called from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;victory_screen&lt;/code&gt; function passing as argument the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; parameter it received, without applying any modification to it.&lt;/p&gt;

&lt;p&gt;If we look for calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;victory_screen&lt;/code&gt; function, we find the following snippet of code under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;game_screen&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;game_screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# --snip--
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;target_amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_coins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_coins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;current_coins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;victory_screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_coins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# --snip--
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We see that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; argument passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;victory_screen&lt;/code&gt; will be equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int(current_coins / 10**8)&lt;/code&gt;. Thus, we need to obtain which value(s) of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_coints&lt;/code&gt; will satisfy the required conditions to arrive to this call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;victory_screen&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;obtain-token-value&quot;&gt;Obtain token value&lt;/h2&gt;

&lt;p&gt;Observe that to enter the body of the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;, we need that:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;current_coins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;103078166528&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then, it will enter a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; loop that decreases the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_coins&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2^20&lt;/code&gt; until the following condition is met:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;current_coins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;103080263680&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thus, we get that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_coins&lt;/code&gt; must satisfy:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;103078166528&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_coins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;103080263680&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_coins&lt;/code&gt; is then divided by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10^8&lt;/code&gt; and casted to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; type. This will essentially remove the 8 least significant digits of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_coins&lt;/code&gt;, meaning that any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_coins&lt;/code&gt; value within the valid interval will lead to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; argument having a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1030&lt;/code&gt;. Thus, our token must be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1030&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;obtain-flag&quot;&gt;Obtain flag&lt;/h2&gt;

&lt;p&gt;To get the flag, we can simply extract the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decode_flag&lt;/code&gt; function into a new python file and print the value it returns when passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1030&lt;/code&gt; as argument.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frob&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoded_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1135&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1038&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1126&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1028&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1117&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1071&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1094&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1077&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1121&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1087&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1110&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1092&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1072&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1095&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1090&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1027&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;mi&quot;&gt;1127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1040&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1030&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1099&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1062&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1027&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1136&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1054&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;decoded_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_value&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;decoded_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;last_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1030&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python decoder.py
idle_with_kitty@flare-on.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, we obtained the flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;idle_with_kitty@flare-on.com&lt;/code&gt; and can move onto the next challenge!&lt;/p&gt;</content><author><name>Arnau Gàmez i Montolio</name></author><category term="Blog" /><category term="flareon" /><category term="reversing" /><category term="python" /><category term="CTF" /><summary type="html">Description We are introduced to the challenge with the following message:</summary></entry><entry><title type="html">Solving lagrange reversing challenge with Cutter</title><link href="http://localhost:4000/blog/2020/04/12/advent-solve-lagrange-cutter/" rel="alternate" type="text/html" title="Solving lagrange reversing challenge with Cutter" /><published>2020-04-12T00:00:00+02:00</published><updated>2020-04-12T00:00:00+02:00</updated><id>http://localhost:4000/blog/2020/04/12/advent-solve-lagrange-cutter</id><content type="html" xml:base="http://localhost:4000/blog/2020/04/12/advent-solve-lagrange-cutter/">&lt;p&gt;The Lagrange reversing challenge was the 6th problem included in the &lt;a href=&quot;https://adventofcorona.hackersatupc.org&quot;&gt;&lt;em&gt;Advent of Corona&lt;/em&gt;&lt;/a&gt; CTF platform. The platform was uploading challenges during the first weeks of covid19 confinement, and it is still up if you want to take a look and play.&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;We download the binary file &lt;a href=&quot;/assets/files/posts/lagrange_baby&quot;&gt;lagrange_baby&lt;/a&gt; from the platform, which includes the following statement for the challenge:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lagrange would be proud, maybe even Newton…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can check that it is, indeed, a 64-bit Linux ELF executable:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ file lagrange_baby
lagrange_baby: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=57b67fb4328e4f7989c7453333bb77c112105f0f, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we run it, looks like it just waits for an input. We provide some random input to observe the outcome:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./lagrange_baby
1234
noup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./lagrange_baby
asdf
noup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time we will be using &lt;a href=&quot;https://cutter.re&quot;&gt;Cutter&lt;/a&gt;, the official radare2 GUI. Let’s load our file into it and select default options for analysis:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 75%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_1.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_1.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Load binary on cutter with default analysis options&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It will take no time to analyse it and prompt us with its pretty UI (notice that the specific windows layout can be different from your default one. You can adapt it to your needs and preferences).&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_2.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_2.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Cutter main view&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;obtaining-first-input&quot;&gt;Obtaining first input&lt;/h2&gt;

&lt;h3 id=&quot;strings-and-references&quot;&gt;Strings and references&lt;/h3&gt;

&lt;p&gt;Let’s take a look at the strings on the .rodata section to see if they offer some hints:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_3.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_3.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Strings on .rodata section&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;From the strings found, we can assume that it will make three different checks on our input (or inputs). If all of them succeed it will print the correct flag, which does not appear to be explicitly hard-coded.&lt;/p&gt;

&lt;p&gt;The first string found is the one printed back to us when we tried some random inputs previously. We now select it and press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; to show cross-references to it.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_4.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_4.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Cross references to &quot;noup&quot; string&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Lucky us, there is only one reference to this string. To show it on the graph view, let’s do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Right click -&amp;gt; Show in -&amp;gt; Graph (main)&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_5.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_5.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;&quot;noup&quot; appearance in Graph view on main function&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;understand-initial-loop-1st-check&quot;&gt;Understand initial loop (1st check)&lt;/h3&gt;

&lt;p&gt;Observe in the graph overview that we reach this block if the comparison in the previous block was unsuccessful. The comparison on this previous block depends on computations done in the previous three basic blocks that are in a row. You can easily observe that there is a loop involving those three basic blocks, and the outcome of this loop will be checked (presumably against our input) to proceed to next check, or to exit passing through the “noup” printing message.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 50%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_6.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_6.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Graph overview on main function&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;To understand this loop we will take advantage of the integrated Ghidra decompiler. First we will fix some mismatching types between ghidra-dec and r2 analysis to avoid variable overlapping and so the decompiler output will be a little bit cleaner. Also we will change their names to describe more precisely their meaning. To do so we just need to select the desired variable on the disassembly listing on the graph view itself and press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt; variable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int32_t&lt;/code&gt;. Also change its name to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input_1&lt;/code&gt; as this will hold the value from the first input.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 75%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_7.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_7.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Change size varible type and name&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_2ch&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uint32_t&lt;/code&gt; . Also change its name to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter_1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 75%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_8.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_8.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Change var_2ch varible type and name&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After those changes, we can observe that the described loop maps to the following pseudocode obtained from the decompiler.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_9.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_9.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Decompilation of first loop&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;bruteforce-first-input&quot;&gt;Bruteforce first input&lt;/h3&gt;

&lt;p&gt;Observe that we included the check that is made just after the loop. This is the check that will lead us to the “noup” message if it fails. As we can see, for the check to be successful, we need our input to be equal to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iVar3&lt;/code&gt; that results from the previous loop computations. Let’s just bruteforce its value by reproducing the loop on a quick python script.&lt;/p&gt;

&lt;p&gt;Note that the challenge author has been kind enough to keep symbols, so we can just assume that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sym.isprime&lt;/code&gt; function does exactly what one expects it to do; checking if the parameter passed is a prime number.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isprime&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;counter_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xd&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#13
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isprime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isprime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iVar3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
      
  &lt;span class=&quot;n&quot;&gt;counter_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we run it, it will give us the solution to be the number &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;. Therefore, we have now the correct value for the first required input.&lt;/p&gt;

&lt;h2 id=&quot;obtaining-second-input-flag&quot;&gt;Obtaining second input (flag)&lt;/h2&gt;

&lt;h3 id=&quot;length-of-second-input-2nd-check&quot;&gt;Length of second input (2nd check)&lt;/h3&gt;

&lt;p&gt;Now we can take a look at the coming flow after the first check has been passed successfully.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_10.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_10.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Second input and check&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As you can see, it makes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; of the number of bytes corresponding to the first input value. So it will be a malloc of 6 bytes. Then is asks for a second input with the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanf&lt;/code&gt; function, storing the value into the memory address pointed by string pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptr&lt;/code&gt;. After that, it checks the length of this second input to be equal to the first input number &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;.  If the check fails, it will go to print us another error message “still noup” (remember it from the strings listing we have seen before).&lt;/p&gt;

&lt;h3 id=&quot;understand-last-loop-3rd-check&quot;&gt;Understand last loop (3rd check)&lt;/h3&gt;

&lt;p&gt;If we provide as a second input a string of length 6 it will then go through the last part of the main function that can be seen here:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_11.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_11.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Last part of the main function&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It is obvious that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_28h&lt;/code&gt; is another counter for a loop. It gets initialized with 0. Then it is compared against the first input, whose value should be the length of the second input string as we have just seen, i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;. While the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_28h&lt;/code&gt; is less than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt; it will perform some computations and another comparison. If the comparison succeeds, its value will be incremented by 1 and loop back to the comparison against first input.&lt;/p&gt;

&lt;p&gt;(Feel free to rename the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_28h&lt;/code&gt; variable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter_2&lt;/code&gt; for example. This can be done as before: select it and press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;If the check within this loop fails at any iteration, the program will go to print us the “aaaaaaaaand still noup” string and exit. Therefore, it is clear that all checks must be passed (a total of 6) and then the flag will be printed to us.&lt;/p&gt;

&lt;p&gt;Observe that the pointer that is passed for the flag printing is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptr&lt;/code&gt;. This is the same pointer to our second input string. This fact reveals that our second input should actually be the correct flag.&lt;/p&gt;

&lt;p&gt;Let’s take a look into the basic block responsible for the comparison in the loop.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 50%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_12.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_12.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Loop comparison for flag&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It is clear that it compares each byte (char) from our second input string to the result obtained from calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sym.epic_function&lt;/code&gt;. We don’t really need to dig into this function, as we are only interested in its output at each iteration. This output will essentially represent the &lt;em&gt;i-th&lt;/em&gt; character of the correct flag.&lt;/p&gt;

&lt;h3 id=&quot;debug-to-get-the-flag-char-by-char&quot;&gt;Debug to get the flag char by char&lt;/h3&gt;

&lt;p&gt;We will now start a Cutter debugging session (&lt;em&gt;yay! we already have debugging support within Cutter :D&lt;/em&gt;) by clicking the “Play” icon in the top bar. This will take us to the debugging view as we can see here:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_12.5.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_12.5.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Debugging view on Cutter&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The process to get the flag at each iteration will be as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Place a breakpoint in the comparison instruction within the loop checking the flag. This can be done selecting the line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmp ebx, eax&lt;/code&gt; and pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F2&lt;/code&gt; or clicking on it and going to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Breakpoint -&amp;gt; Add breakpoint&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Patch the conditional jump in the next instruction to be inconditional so it will always continue the loop. This can be done by clicking into it and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit -&amp;gt; Instruction&lt;/code&gt;.&lt;/p&gt;

    &lt;figure class=&quot;align-center&quot; style=&quot;width: 75%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_13.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_13.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Change instruction to inconditional jump&lt;/figcaption&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Continue until program breaks. This can be done by pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F5&lt;/code&gt; or clicking in the “fast forward” icon in the top bar. You will need to provide the inputs. This can be easily done within Cutter directly. Just go to the bottom-left and change the “R2 Console” value of the menu into “Debugee Input”. Then provide appropriate inputs in order. First &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt; and then any 6-byte-long string like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AAAAAA&lt;/code&gt; so it will pass the second check directly. After providing the inputs, the program will break.&lt;/p&gt;

    &lt;figure class=&quot;align-center&quot; style=&quot;width: 75%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_14.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_14.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Provide input within the debugging session&lt;/figcaption&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check value at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt;, it will contain the &lt;em&gt;i-th&lt;/em&gt; character of the correct flag string. We can see it in the register’s window (under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt; register, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; is essentially the lower 32-bit part of the 64-bit register &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt;). A really quick and simple way to get the ASCII representation is just to hover over it.&lt;/p&gt;

    &lt;figure class=&quot;align-center&quot; style=&quot;width: 75%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/lagrange_cutter_15.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/lagrange_cutter_15.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Check correct char of flag&lt;/figcaption&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Repeat until it exits.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After 6 iterations, we will have the correct flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C0roN4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can now test it running the program and providing the correct inputs we obtained:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./lagrange_baby 
6
C0roN4
flag{C0roN4}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As expected, the program returned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag{C0roN4}&lt;/code&gt; as output, so we have successfully solved the challenge.&lt;/p&gt;

&lt;h2 id=&quot;additional-comments&quot;&gt;Additional comments&lt;/h2&gt;

&lt;p&gt;This challenge is a good example of two important things to keep in mind while reversing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If we &lt;em&gt;somehow&lt;/em&gt; have symbols for the binary, we can take a lot of advantage from them. In this case they were provided embedded, as the binary was non stripped. This allowed us to super quickly assume that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sym.isprime&lt;/code&gt; function did what it looked like it had to do. I encourage you to take a look at the function itself and imagine having to conduct the same reversing session but not knowing its symbol name. You will probably find quite lost inside a function that relies on random procedures and makes more nested function calls. It is not trivial at all to discover that this function is &lt;em&gt;just&lt;/em&gt; checking if a given number is prime. If you are curious, it is actually implementing the &lt;a href=&quot;https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test&quot;&gt;Miller-Rabin primalty test&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;It is very easy to get lost into details that are non important to our objective. In this binary we can take as example the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sym.epic_function&lt;/code&gt;. If you take a look into it, you will see that it makes some floating point operations as well as some calls to another function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sym.pow_mod&lt;/code&gt;. You could spend a pretty large amount of time dealing with those trying to understand what is actually happening inside them, and probably getting frustrated as well. However, as you have seen above, there is no need to dig into them, as we are only interested in its plain outcome, regardless of its inner implementation. Anyway, for the curious people out there, I am pretty sure that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sym.epic_function&lt;/code&gt; is just a hard-coded polynomial that has been constructed ad-hoc by interpolating the pairs of inputs and outputs for each char of the flag string. That is, for I/O pairs (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 + counter_2 at i-th iteration&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i-th char of flag string&lt;/code&gt;). Feel free to spend some time reversing and reconstructing it.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Arnau Gàmez i Montolio</name></author><category term="Blog" /><category term="radare2" /><category term="reversing" /><category term="Cutter" /><category term="hackupc" /><category term="advent" /><summary type="html">The Lagrange reversing challenge was the 6th problem included in the Advent of Corona CTF platform. The platform was uploading challenges during the first weeks of covid19 confinement, and it is still up if you want to take a look and play.</summary></entry><entry><title type="html">Solving sonda reversing challenge with radare2</title><link href="http://localhost:4000/blog/2020/04/03/hackupc-sonda-writeup/" rel="alternate" type="text/html" title="Solving sonda reversing challenge with radare2" /><published>2020-04-03T00:00:00+02:00</published><updated>2020-04-03T00:00:00+02:00</updated><id>http://localhost:4000/blog/2020/04/03/hackupc-sonda-writeup</id><content type="html" xml:base="http://localhost:4000/blog/2020/04/03/hackupc-sonda-writeup/">&lt;p&gt;This was the reversing challenge from the HackUPC &lt;em&gt;TheGame&lt;/em&gt; CTF-like competition. A slightly modified version has also been used recently during the &lt;em&gt;Advent of Corona&lt;/em&gt; running platform of challenges during the 2020 covid19 confinement.&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;We are encouraged to download a file named &lt;a href=&quot;/assets/files/posts/sonda&quot;&gt;sonda&lt;/a&gt; referred as SONDA.EXE, so it seems it will be an executable file. We can easily observe that the file is a typical linux executable using file utility&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ file sonda
sonda: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=5d07808273b712ed8fa47fa8205e11d6926784b3, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we run it we are asked for a magic number. We can try to throw some random values just to observe that it shows a “BAD…” message and exits the program.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./sonda
Give me the magic number: 1234
BAD...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is clear that first thing we will need is to get the correct magic number value.&lt;/p&gt;

&lt;p&gt;Let’s fire up our beloved &lt;a href=&quot;https://github.com/radareorg/radare2&quot;&gt;radare2&lt;/a&gt; and start analysing it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: although I have included some explanations, if you are new to radare2 and/or want a review of capabilities and some more practical usage, you might want to take a look at the materials (video/slides/github) from my 2h introduction to radare2 from Hack In The Box 2019. Check it out under &lt;a href=&quot;/talks&quot;&gt;talks&lt;/a&gt; section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;basic-analysis&quot;&gt;Basic analysis&lt;/h2&gt;

&lt;p&gt;We open sonda file with r2 and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iq&lt;/code&gt; command to get quick &lt;strong&gt;i&lt;/strong&gt;nformation about the file in &lt;strong&gt;q&lt;/strong&gt;uiet (reduced) form.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ r2 sonda
[0x000007c0]&amp;gt; iq
arch x86
bits 64
os linux
endian little
minopsz 1
maxopsz 16
pcalign 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that radare2 reports that we are dealing with a x86-64 linux (ELF64) executable, as we already knew. If you are interested you can explore different options for information extraction with in-line help of &lt;strong&gt;i&lt;/strong&gt;nformation command using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we will check strings on the binary using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iz&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[0x000007c0]&amp;gt; iz
[Strings]
Num Paddr      Vaddr      Len Size Section  Type  String
000 0x00000bd4 0x00000bd4  26  27 (.rodata) ascii Give me the magic number: 
001 0x00000bf2 0x00000bf2   6   7 (.rodata) ascii BAD...
002 0x00000bf9 0x00000bf9  14  15 (.rodata) ascii Tell me more: 
003 0x00000c0b 0x00000c0b  20  21 (.rodata) ascii WTF is wrong with u?
004 0x00000c20 0x00000c20  20  21 (.rodata) ascii NOOB! Keep trying...
005 0x00000c35 0x00000c35   9  10 (.rodata) ascii flag{\%s}\n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just from here without even running the executable, we can guess the flow of the binary: it looks like it will ask for a “magic number”. If we provide the correct input, then will ask us for more input, make some checking again and, if correct, will print us the flag we are looking for.&lt;/p&gt;

&lt;p&gt;Let’s now use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaa&lt;/code&gt; (&lt;strong&gt;a&lt;/strong&gt;nalyse &lt;strong&gt;a&lt;/strong&gt;ll &lt;strong&gt;a&lt;/strong&gt;utoname) to let radare2 make some of its magic with automatic analysis of the binary (check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a?&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa?&lt;/code&gt; for more information). Now we can list the functions found with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;afl&lt;/code&gt; (&lt;strong&gt;a&lt;/strong&gt;nalysis &lt;strong&gt;f&lt;/strong&gt;unctions &lt;strong&gt;l&lt;/strong&gt;ist)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[0x000007c0]&amp;gt; afl
0x000007c0    1 42           entry0
0x000007f0    4 50   -&amp;gt; 40   sym.deregister_tm_clones
0x00000830    4 66   -&amp;gt; 57   sym.register_tm_clones
0x00000880    5 58   -&amp;gt; 51   entry.fini0
0x000008c0    1 10           entry.init0
0x00000bc0    1 2            sym.__libc_csu_fini
0x00000bc4    1 9            sym._fini
0x00000b50    4 101          sym.__libc_csu_init
0x000008ca   20 642          main
0x000006f0    3 23           sym._init
0x00000720    1 6            sym.imp.free
0x00000730    1 6            sym.imp.puts
0x00000740    1 6            sym.imp.strlen
0x00000750    1 6            sym.imp.__stack_chk_fail
0x00000760    1 6            sym.imp.printf
0x00000000    2 25           loc.imp._ITM_deregisterTMCloneTable
0x00000770    1 6            sym.imp.srand
0x00000780    1 6            sym.imp.malloc
0x00000790    1 6            sym.imp.__isoc99_scanf
0x000007a0    1 6            sym.imp.rand
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see a bunch of different functions, including some familiar imported ones. However, it looks like the more interesting (and biggest) is the main function, so we will start digging in there.&lt;/p&gt;

&lt;p&gt;Now the funny part starts. Let’s disassemble the main function. We can do it in many different ways, but the most useful in this case would probably be to check the graph view of the function. This is done with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VV&lt;/code&gt; command, and we can specify a temporary seek for the main address with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt; (otherwise we would have to &lt;strong&gt;s&lt;/strong&gt;eek at main offset with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s main&lt;/code&gt; before using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VV&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[0x000007c0]&amp;gt; VV @ main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once in the graph view, we can repeatedly press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; in order to change the amount/form of information displayed on it. If we just press one time it will show us the memory address for every instruction, which will come handy.&lt;/p&gt;

&lt;p&gt;Here we have the big picture of the main function as a graph view of its basic blocks content and interaction, that we will be exploring by parts.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 50%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/sonda_graph_zoom_out.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/sonda_graph_zoom_out.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Graph view of main function (zoomed out)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that while we are on graph view, we should use colon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; to be able to input r2 commands, as happens with the visual modes that radare2 offers.&lt;/p&gt;

&lt;h2 id=&quot;obtaining-the-magic-number&quot;&gt;Obtaining the magic number&lt;/h2&gt;

&lt;h3 id=&quot;understand-the-problem&quot;&gt;Understand the problem&lt;/h3&gt;

&lt;p&gt;If we observe the flow at the end of first basic block of main function we can see that the input value we provided through the first scanf (remember, the “magic number”) is copied from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecx&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x92a&lt;/code&gt; (it was copied before into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecx&lt;/code&gt; after returning from scanf call) and it is compared to the value in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edx&lt;/code&gt; that will contain the result of the previous operations.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/sonda_bb_main_1.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/sonda_bb_main_1.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Graph view of main first basic blocks&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The comparison is done by subtracting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edx&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x92c&lt;/code&gt; and then using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test eax, eax&lt;/code&gt; instruction, which will make an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AND&lt;/code&gt; logic operation on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; and set zero flag if result is zero. That basically means that zero flag will be set only if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; (which contains our input value) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edx&lt;/code&gt; contained the same value before the subtraction.&lt;/p&gt;

&lt;p&gt;So we need to obtain the value that gets into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edx&lt;/code&gt; for the comparison but… not that fast. Observe that the input value (the magic number) will be used for the computations that will affect the value at the end stored at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edx&lt;/code&gt; so we can’t just debug it, place a breakpoint before comparison, give a random input number and retrieve value at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edx&lt;/code&gt;. We can proceed in two different ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Decode/understand statically the process that manipulates input value, mixes and plays with it in different ways and stores value in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edx&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Bruteforce it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First approach would be fairly easy in this case. Indeed, if you know just a little of x86 assembly and how usual and simple code constructs map to it, you probably already recognize this sequence. But for today, let’s explore the second option of bruteforcing it.&lt;/p&gt;

&lt;p&gt;Observe the basic block that follows the false branch of the comparison. This false branch will be taken when the zero flag is set. That is when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edx&lt;/code&gt; have the same value because we have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jne&lt;/code&gt; unconditional jump. You will see that this basic block makes an extra check on the input value. It checks it to be &lt;em&gt;lower or equal&lt;/em&gt; than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x14&lt;/code&gt;. If the comparison succeeds, the flow will follow into the meaningful part of the program. Otherwise, it would should the bad message and exit.&lt;/p&gt;

&lt;p&gt;The previous fact means that the input magic number will be at most &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x14 = 20&lt;/code&gt;. Therefore, a bruteforce approach should go very quick.&lt;/p&gt;

&lt;p&gt;In the next section I will show you how we can leverage radare2’s code emulation with ESIL. Using the bruteforce approach will serve us as an excuse for a practical example.&lt;/p&gt;

&lt;h3 id=&quot;emulation-idea&quot;&gt;Emulation idea&lt;/h3&gt;

&lt;p&gt;The basic idea for bruteforce the needed input value with emulation will be as follows (note that emulation options are under &lt;strong&gt;ae&lt;/strong&gt; (sub)commands, standing for &lt;strong&gt;a&lt;/strong&gt;nalysis &lt;strong&gt;e&lt;/strong&gt;sil. Check them with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ae?&lt;/code&gt;):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Initialize ESIL VM state with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aei&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecx&lt;/code&gt; to 0 (in the context of the emulation engine VM; remember we are not actually running the program!) with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aer ecx = 0&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Seek to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x90e&lt;/code&gt; (where the snippet of code computing the desired value starts) with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s 0x90e&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Set instruction pointer for ESIL to current seeked position with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aeip&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Emulate execution (stepping) until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x92c&lt;/code&gt; (just before the subtraction is done) with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aesu 0x92c&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Compare values of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; (gets loaded from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecx&lt;/code&gt; where our input is stored) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edx&lt;/code&gt;. If they are equal, we found a valid number input.&lt;/li&gt;
  &lt;li&gt;Increment &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecx&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Repeat from 2 until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecx&lt;/code&gt; is less or equal than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x14 = 20&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;scripting-with-r2pipe-to-perform-the-bruteforce&quot;&gt;Scripting with r2pipe to perform the bruteforce&lt;/h3&gt;

&lt;p&gt;We will use r2pipe API to script on top of r2 with python and do the bruteforce more easily, as it is extremely simple to use yet very powerful. As a super quick introduction, it is worth mentioning that r2pipe API consists of 4 methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;open&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;cmd&lt;/em&gt;&lt;/strong&gt;: input a r2 command and get r2 output as output&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;cmdj&lt;/em&gt;&lt;/strong&gt;: input a r2 command with &lt;strong&gt;&lt;em&gt;j&lt;/em&gt;&lt;/strong&gt; suffix that returns json output, it will deserialize into native object&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;quit&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that in mind we can create this simple script that will iterate over possible values and print when there is a possible candidate:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;r2pipe&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./sonda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aer ecx = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;s 0x90e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aeip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aesu 0x92c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aer eax&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aer edx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Candidate magic number: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can run this script and get:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 brute_magic.py
Candidate magic number: 0
Candidate magic number: 17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see we have two possible candidates. If you look at the basic block we arrive for valid magic number input (in the screenshot above), you can see that it uses that value as the size for a &lt;em&gt;malloc&lt;/em&gt; call, so it is reasonable to make the educated guess that the actual &lt;strong&gt;correct&lt;/strong&gt; magic number is intended to be 17, as a &lt;em&gt;malloc&lt;/em&gt; of size 0 would not make much sense.&lt;/p&gt;

&lt;p&gt;By the way, the operation being performed is exactly a &lt;em&gt;mod 17&lt;/em&gt;, so basically is checking if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magic_number % 17 == 0&lt;/code&gt;. That explains why 0 is valid as well. Also you might notice that other multiples of 17 would work as well for the first check, but they won’t pass the second check to be less than 20.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are interested in how emulation with ESIL is implemented and works, you might want to take a look at my talk about emulation with ESIL at past r2con2019. Check it out under &lt;a href=&quot;/talks&quot;&gt;talks&lt;/a&gt; section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;obtaining-the-actual-flag&quot;&gt;Obtaining the actual flag&lt;/h2&gt;

&lt;p&gt;If we run the program and use as magic number the value 17 we just got, we can observe that it asks for another input.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./sonda 
Give me the magic number: 17
Tell me more: asdf
NOOB! Keep trying...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;flag-information&quot;&gt;Flag information&lt;/h3&gt;

&lt;p&gt;Let’s continue by checking the code where we land after the first check for magic number is successfully passed:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/sonda_bb_main_2.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/sonda_bb_main_2.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Graph view of main basic block after correct magic number&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We can see that the false branch will be taken if the result of a call to the &lt;em&gt;strlen&lt;/em&gt; imported function, using the second input that we are asked as argument, returns a value greater than the magic number we introduced, leading us to another angry message and exiting the program. So this basically means that the second input has to have length at most 17. You can try to throw more than 17 chars on second input and will get the WTF message:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./sonda 
Give me the magic number: 17
Tell me more: AAAAAAAAAAAAAAAAAAAAAAAAA
WTF is wrong with u?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another important thing to note is that the pointer returned by the malloc in this basic block is the same as the pointer that will be accessed to print its value on the basic block that will display the flag value (near the end of main function). Note that the pointer has been automatically renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptr&lt;/code&gt; by radare2 magic applied on the analysis:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/sonda_bb_main_flag.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/sonda_bb_main_flag.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Graph view of main basic block that will print flag&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;What this is telling us is that the string we will need to use as input now is going to be the actual flag, so only when we reconstruct the flag content, we will be able to use it as input and therefore the basic block that will print us back the flag will be reached.&lt;/p&gt;

&lt;p&gt;You might have noticed that there is only one path to the basic block printing the flag. Indeed, it will only be reached if the value stored at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_34h&lt;/code&gt; is less than our first input value, the magic number (observe that radare2 was smart enough to automatically rename it to &lt;em&gt;size&lt;/em&gt; when we performed the initial analysis).&lt;/p&gt;

&lt;p&gt;We will now explore the last few basic blocks before exiting. Those will be the meaningful ones to be able to discover the appropriate input to get to the flag, as the previous ones after the second input are just setting up some values that will be used later in here.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/sonda_bb_main_3.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/sonda_bb_main_3.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Graph view of main basic blocks reaching end of function&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Notice that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_34h&lt;/code&gt; that was used before for the check into flag’s basic block is indeed a counter, as can be seen in the one-line basic block at the right. It is already safe to assume (and it is this way indeed, if you take a closer look to the code above) that the correct flag will be somehow checking char by char against our second input. The actual comparison is actually happening on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xac8&lt;/code&gt;.  If the char is correct, then it will increase the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_34h&lt;/code&gt; counter and proceed with next char.&lt;/p&gt;

&lt;p&gt;To be more precise, observe that what is being compared is not actually the current char value, but the accumulated sum of the current char value with the previous ones. I encourage you to take a closer look by yourself navigating through this part of the code and trying to understand this loop construction of comparing the accumulated sum element by element, increasing a counter until some fixed value, as it is quite common and you will encounter it continuously in you reversing adventures.&lt;/p&gt;

&lt;h3 id=&quot;retrieve-flag-with-debugging&quot;&gt;Retrieve flag with debugging&lt;/h3&gt;

&lt;p&gt;Our strategy to obtain the flag will be based on debugging the binary and retrieve each value individually in the moment of the comparison. To do so, we will first need to open the binary on debug mode with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt; flag. This will of course change the addresses we view, as starting now we will be looking at addresses of process memory, instead of the memory layout of the file in disk which starts at offset 0.&lt;/p&gt;

&lt;p&gt;We will use a &lt;a href=&quot;https://radare.gitbooks.io/radare2book/tools/rarun2/intro.html&quot;&gt;rarun2&lt;/a&gt; directive in order to disable &lt;a href=&quot;https://en.wikipedia.org/wiki/Address_space_layout_randomization&quot;&gt;aslr&lt;/a&gt; for the process, so we can reuse explicit address references if needed. Note that we can inline rarun2 directives when spawning the r2 debug shell with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-R&lt;/code&gt; flag, instead of creating a rarun2 file. Thus, to open the binary in debug mode with specified rarun2 directive we do:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ r2 -d -R aslr=no sonda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Base_address&quot;&gt;base address&lt;/a&gt; being used for the debugging session of the binary is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x555555554000&lt;/code&gt; by default, as aslr has been disabled. You can check its value with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ob&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now the procedure will be as follows (note that &lt;strong&gt;d&lt;/strong&gt;ebug options are under &lt;strong&gt;d&lt;/strong&gt; (sub)commands. Check them with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d?&lt;/code&gt;):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Locate the comparison described before. It will be trivial to found by just following the main function’s graph.&lt;/li&gt;
  &lt;li&gt;Patch conditional jump &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;je&lt;/code&gt; after comparison for an unconditional jump &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp&lt;/code&gt;  that will always take us to next loop cycle despite our input value being wrong (so the comparison condition failing) with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wa jmp 0x555555554af8 @ 0x555555554acb&lt;/code&gt; (&lt;strong&gt;w&lt;/strong&gt;rite &lt;strong&gt;a&lt;/strong&gt;ssembly ASM at ADDRESS).&lt;/li&gt;
  &lt;li&gt;Place a &lt;strong&gt;b&lt;/strong&gt;reakpoint in that address with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db 0x555555554ac8&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;ontinue program until it breaks with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dc&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; &lt;strong&gt;r&lt;/strong&gt;egister value. This can be done with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dr rax&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Repeat steps 4 and 5 until flag message is printed. It will be after 17 steps, as is is controlled by the counter described previously that gets compared to the first input value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Instead of patching the jump after the comparison, we could have followed some other strategies that would have led us to same results, for example patching instruction pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rip&lt;/code&gt; with value as if comparison had been successful with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dr rip = 0x555555554af8&lt;/code&gt; every time after we reach the breakpoint.&lt;/p&gt;

&lt;p&gt;Feel free to experiment this other alternative and any other you could think of. The result will still be the same, and we will be able to retrieve the flag.&lt;/p&gt;

&lt;p&gt;Please note that as we are on a debug session, when we are applying those memory patches, they are applied into the process memory, but no modification is made to the file in disk.&lt;/p&gt;

&lt;p&gt;For practical reasons we will combine steps 4 and 5 by just using a semicolon between them &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dc; dr rax&lt;/code&gt;. Indeed, we can combine any number of r2 commands in a single line by just separating them with a semicolon.&lt;/p&gt;

&lt;p&gt;Moreover, we will define a &lt;a href=&quot;https://radare.gitbooks.io/radare2book/scripting/macros.html&quot;&gt;macro&lt;/a&gt; that will make exactly that, so we can call it directly and any number of times. A macro can be defined as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(macro_name; cmd1; cmd2; cmd3 ...)&lt;/code&gt; and then called with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.(macro_name)&lt;/code&gt;. We can prefix it with the number of times &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; to be called, so it will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N.(macro_name)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look at what we get after all the steps described:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[0x7ffff7fd1100]&amp;gt; wa jmp 0x555555554af8 @ 0x555555554acb
Written 2 byte(s) (jmp 0x555555554af8) = wx eb2b
[0x7ffff7fd1100]&amp;gt; db 0x555555554ac8
[0x7ffff7fd1100]&amp;gt; (loop; dc; dr rax)
[0x7ffff7fd1100]&amp;gt; 17.(loop)
Give me the magic number: 17
Tell me more: asdf
hit breakpoint at: 555555554ac8
0x00000036
hit breakpoint at: 555555554ac8
0x000000a4
hit breakpoint at: 555555554ac8
0x00000120
hit breakpoint at: 555555554ac8
0x0000016c
hit breakpoint at: 555555554ac8
0x0000019c
hit breakpoint at: 555555554ac8
0x000001f2
hit breakpoint at: 555555554ac8
0x00000214
hit breakpoint at: 555555554ac8
0x0000024a
hit breakpoint at: 555555554ac8
0x00000288
hit breakpoint at: 555555554ac8
0x000002ee
hit breakpoint at: 555555554ac8
0x0000034a
hit breakpoint at: 555555554ac8
0x0000036e
hit breakpoint at: 555555554ac8
0x000003b8
hit breakpoint at: 555555554ac8
0x000003fd
hit breakpoint at: 555555554ac8
0x00000478
hit breakpoint at: 555555554ac8
0x000004ed
hit breakpoint at: 555555554ac8
0x00000546
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can check that we reached the last comparison by continuing program with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dc&lt;/code&gt; and observe that it will print us the flag message. Of course it won’t be the correct flag, as it will only load our input and display it wrapped inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag{}&lt;/code&gt;. You might wonder why is the flag message being printed at all. Basically, as we patched the jump instruction after comparison to be always treated as if it was successful, the program will act as if the flag was correct so it will print us back our input, which, as we explained before, will actually the flag content that we need to reconstruct.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[0x555555554ac8]&amp;gt; dc
flag{asdf}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have all the values of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt; at each step, which will contain the accumulated sum of the chars for the actual flag. So starting from 2nd value, we basically need to subtract the previous value from the current and we will get the flag char by char:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x36 = 54 = '6'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xa4 - 0x36 = 110 = 'n'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x120 - 0xa4 = 124 = '|'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So boring to do it manually, right? Of course you can get the output and parse with your favorite shell utilities and/or scripting language to make it for you. We will demonstrate again the use of the r2pipe python API to automate this process by directly manipulating the r2 output for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt; at each step.&lt;/p&gt;

&lt;h3 id=&quot;automate-flag-extraction-with-r2pipe&quot;&gt;Automate flag extraction with r2pipe&lt;/h3&gt;

&lt;p&gt;In order to do it completely automatic, we will define another rarun2 directive that will specify a file that will serve to feed the stdin of the program. We create a plain text file that will contain the following to feed both inputs:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat input.txt
17
asdf

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is the magic number 17 and then the second input, which can be totally random (provided it is at most 17 chars long so it does not throw us to the WTF message), as all the checks on it will be bypassed by the jump patch. Those will be passed when program asks for input from stdin through scanf function calls.&lt;/p&gt;

&lt;p&gt;As we are now scripting with python, we don’t need to define a macro at all. Indeed, it will be better just to iterate 17 times and store the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rax&lt;/code&gt; value and subtract it from previous one to get the correct char of the flag at each step. Afterwards we will simply print the obtained flag.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;r2pipe&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./sonda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'stdin=input.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'aslr=no'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wa jmp 0x555555554af8 @ 0x555555554acb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;db 0x555555554ac8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dr rax&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Flag obtained -&amp;gt; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s run this script and chill while it does all the work for us.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 solve_sonda.py
Process with PID 806 started...
= attach 806 806
bin.baddr 0x555555554000
Using 0x555555554000
asm.bits 64
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8
hit breakpoint at: 555555554ac8

---
Flag obtained -&amp;gt; 6n|L0V&quot;6&amp;gt;f\$JE{uY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Eureka! Here we have our beloved flag. Let’s try it to verify it.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./sonda
Give me the magic number: 17
Tell me more: 6n|L0V&quot;6&amp;gt;f\$JE{uY
flag{6n|L0V&quot;6&amp;gt;f\$JE{uY}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, that will be it. We obtained the solution &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag{6n|L0V&quot;6&amp;gt;f\$JE{uY}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;some-final-random-thoughts&quot;&gt;Some final &lt;em&gt;random&lt;/em&gt; thoughts&lt;/h2&gt;

&lt;p&gt;You might wonder why the flag is so &lt;em&gt;weird&lt;/em&gt;. I wondered too, so I took a deeper look.&lt;/p&gt;

&lt;p&gt;We previously skipped a couple of basic blocks that were not essential to investigate, as all the information needed to retrieve the flag during the comparison was already prepared when reaching it. If you take a closer look at those, you will notice that the flag generation depends on the outcome of the random number generator (RNG) that was initialized using the &lt;em&gt;magic number&lt;/em&gt; input as its seed.&lt;/p&gt;

&lt;p&gt;It is safe to assume that the author of the challenge just decided that the flag would be of size 17, then initialized the RNG with this seed and observed the outcome of the performed mangling on top of the values thrown by this RNG and directly used that as a flag. It would have been quite tedious (not impossible at all, maybe just not worth or time-effective) to create a more personalized flag while relying on the RNG output.&lt;/p&gt;</content><author><name>Arnau Gàmez i Montolio</name></author><category term="Blog" /><category term="thegame" /><category term="sonda" /><category term="hackupc" /><category term="radare2" /><category term="esil" /><category term="emulation" /><category term="reversing" /><category term="r2pipe" /><summary type="html">This was the reversing challenge from the HackUPC TheGame CTF-like competition. A slightly modified version has also been used recently during the Advent of Corona running platform of challenges during the 2020 covid19 confinement.</summary></entry><entry><title type="html">Solving LMFAO stego challenge</title><link href="http://localhost:4000/blog/2019/10/21/hackupc-lmfao-writeup/" rel="alternate" type="text/html" title="Solving LMFAO stego challenge" /><published>2019-10-21T00:00:00+02:00</published><updated>2019-10-21T00:00:00+02:00</updated><id>http://localhost:4000/blog/2019/10/21/hackupc-lmfao-writeup</id><content type="html" xml:base="http://localhost:4000/blog/2019/10/21/hackupc-lmfao-writeup/">&lt;p&gt;Last week I attended the &lt;a href=&quot;https://hackupc.com/&quot;&gt;HackUPC&lt;/a&gt; at Barcelona. They were running a 24h CTF-like competition with different challenges focused on algorithms, programming and some hacking. I wasn’t planning to play, but some friends got me involved in the last moment and I somehow managed to win the competition by completing all challenges and getting max score, along with Yuva.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/TheGame_HOF.jpg&quot; alt=&quot;The Game - Hall of Fame&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you will find my writeup for the &lt;em&gt;LMFAO&lt;/em&gt; steganography challenge.&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;We are just provided the following image and random footer:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 50%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/LMFAO.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/LMFAO.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;I like eggs for breakfast&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It seems pretty clear that this image has been scrambled somehow from an original one. Thus, our goal will be to recover the original image.&lt;/p&gt;

&lt;p&gt;We will need some information before starting to randomly move pixels around.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;Let’s start by applying some filters to the image in order to see if we can find something suspicious. For this, we will use &lt;a href=&quot;http://www.caesum.com/handbook/Stegsolve.jar&quot;&gt;Stegsolve.jar&lt;/a&gt; utility.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width:50%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/LMFAO_stegsolve_1.gif&quot;&gt;&lt;img src=&quot;/assets/images/posts/LMFAO_stegsolve_1.gif&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Apply filters with Stegsolve&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Observe that the filters corresponding to masking with bit 0 (Least Significant Bit) for the three color channels, clearly show that something is encoded on the upper part of the image in those bits. We can explore it and extract the data with Stegsolve itself.&lt;/p&gt;

&lt;p&gt;Going to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Analyse -&amp;gt; Data Extract&lt;/code&gt;we can play with its values. We are interested in bit 0 from RGB channels. If we select those bits and with default Order settings, we will find the following data:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/LMFAO_stegsolve_2.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/LMFAO_stegsolve_2.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Extract data with Stegsolve (w/o hexdump)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now it’s obvious that this data is indicating us how the image was scrambled. We assume V stands for Vertical (columns) and H for Horizontal (rows). Also the following two numbers meaning the rows/columns swapped. Therefore, we have that:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V 236 39&lt;/code&gt; means swapping columns 236 and 39&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H 262 7&lt;/code&gt; means swapping rows 262 and 7&lt;/p&gt;

&lt;p&gt;and so on…&lt;/p&gt;

&lt;p&gt;Finally we will save the data as text clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save Text&lt;/code&gt; button to get a textfile ready to be loaded.&lt;/p&gt;

&lt;h2 id=&quot;recover-original-image&quot;&gt;Recover original image&lt;/h2&gt;

&lt;p&gt;Now that we know how the image was scrambled, it is just a matter of transforming what we have into the original image by scrambling back the image that we are given, i.e. applying the swapping operations found in reverse order.&lt;/p&gt;

&lt;p&gt;We can do this easily with python. Let’s see how:&lt;/p&gt;

&lt;h3 id=&quot;read-image-and-extract-color-channels&quot;&gt;Read image and extract color channels&lt;/h3&gt;

&lt;p&gt;We will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io&lt;/code&gt; subpackage from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;skimage&lt;/code&gt; library in order to read the image:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;skimage&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LMFAO.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we will need to get each color channel in order to apply the transformations to all of them afterwards&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;read-and-parse-data-extracted-previously&quot;&gt;Read and parse data extracted previously&lt;/h3&gt;

&lt;p&gt;Now we will read the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moves.txt&lt;/code&gt; that we saved before, containing the extracted data, and will create a list containing all the required information with the form: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;['V', '236', '39', 'H', '262', '7', ...]&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moves.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;581&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to get a clean list from the input data as we wanted, we needed to slightly massage it:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x[:8]+x[9:-1]&lt;/code&gt;gets rid of a space on position 8th of each line, as well as removing newline &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt; character.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:581]&lt;/code&gt; gets rid of lines 582 ongoing, as they do not contain more data&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:-15]&lt;/code&gt; removes last 15 characters from obtained string, as the last line (n. 581) has only one meaningful character (8, at the very beginning)&lt;/p&gt;

&lt;h3 id=&quot;apply-transformations-in-reverse-order&quot;&gt;Apply transformations in reverse order&lt;/h3&gt;

&lt;p&gt;We will traverse the generated list from end to beginning and apply the transformations in that order. Let’s see the code to do this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;H&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;V&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We simply assign &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p1&lt;/code&gt; to the first operand and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p2&lt;/code&gt; to the second one. Then if we find an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H&lt;/code&gt; will mean that it is an horizontal swap, i.e. swapping rows, and if we find a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt; will mean that it is a vertical swap, i.e. swapping columns. Performing the transformation is easily achieved just by list indexing as shown in code.&lt;/p&gt;

&lt;h3 id=&quot;putting-all-together&quot;&gt;Putting all together&lt;/h3&gt;

&lt;p&gt;After all, we get to the following complete code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;skimage&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Read image and extract color channels
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LMFAO.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Read and parse txt output from Stegsolve
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moves.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;581&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Apply transformations in reverse order
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;H&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;V&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Save resulting image
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imsave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LMFAO_solved.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Observe that we have just added the final line in order to save the resulting image into an actual file.&lt;/p&gt;

&lt;h2 id=&quot;solve&quot;&gt;Solve&lt;/h2&gt;

&lt;p&gt;Now if we just run the code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python lmfao.py&lt;/code&gt; it will produce the resulting image file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LMFAO_solved.png&lt;/code&gt; from where we can extract the flag:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 50%&quot;&gt;
    &lt;a href=&quot;/assets/images/posts/LMFAO_solved.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/LMFAO_solved.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Recovered original image&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As we can see, we get the solution &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag{se_biene_bien_duro}&lt;/code&gt;&lt;/p&gt;</content><author><name>Arnau Gàmez i Montolio</name></author><category term="Blog" /><category term="hackupc" /><category term="writeup" /><category term="stego" /><category term="steganography" /><category term="thegame" /><summary type="html">Last week I attended the HackUPC at Barcelona. They were running a 24h CTF-like competition with different challenges focused on algorithms, programming and some hacking. I wasn’t planning to play, but some friends got me involved in the last moment and I somehow managed to win the competition by completing all challenges and getting max score, along with Yuva.</summary></entry><entry><title type="html">Digging Deeper into Gmail URLs</title><link href="http://localhost:4000/blog/2019/07/29/digging-deeper-gmail-urls/" rel="alternate" type="text/html" title="Digging Deeper into Gmail URLs" /><published>2019-07-29T00:00:00+02:00</published><updated>2019-07-29T00:00:00+02:00</updated><id>http://localhost:4000/blog/2019/07/29/digging-deeper-gmail-urls</id><content type="html" xml:base="http://localhost:4000/blog/2019/07/29/digging-deeper-gmail-urls/">&lt;p&gt;Find my published research on extracting timestamps and other information from Gmail URLs with the accompanying tool &lt;strong&gt;&lt;em&gt;Gmail URL Decoder&lt;/em&gt;&lt;/strong&gt; that I developed during my DFIR internship at &lt;a href=&quot;https://arsenalrecon.com/&quot;&gt;Arsenal&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnau Gàmez i Montolio</name></author><category term="Blog" /><category term="DFIR" /><category term="gmail" /><category term="URL" /><summary type="html">Find my published research on extracting timestamps and other information from Gmail URLs with the accompanying tool Gmail URL Decoder that I developed during my DFIR internship at Arsenal.</summary></entry><entry><title type="html">Hello world!</title><link href="http://localhost:4000/blog/2019/07/25/hello-world/" rel="alternate" type="text/html" title="Hello world!" /><published>2019-07-25T00:00:00+02:00</published><updated>2019-07-25T00:00:00+02:00</updated><id>http://localhost:4000/blog/2019/07/25/hello-world</id><content type="html" xml:base="http://localhost:4000/blog/2019/07/25/hello-world/">&lt;p&gt;Hello world!&lt;/p&gt;</content><author><name>Arnau Gàmez i Montolio</name></author><category term="Blog" /><category term="Hello" /><summary type="html">Hello world!</summary></entry></feed>